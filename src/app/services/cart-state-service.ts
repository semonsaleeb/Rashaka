// services/cart-state.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

// Ø¯Ù‡ Ø¨Ø³ Ù…Ø«Ø§Ù„ Ù„Ùˆ Ø§Ù†Øª Ù…Ø­ØªØ§Ø¬Ù‡ Ù…Ø¹ Ø§Ù„ÙƒØ§Ø±Øª
export interface PromoResponse {
  success: boolean;
  original_total: number;
  discount_amount: number;
  new_total: number;
  promocode: string;
}

export interface CartItem {
  id: number;
  product_id: number;
  name: string;
  name_ar: string;
  product_name: string;
  product_name_ar: string;
  description: string;
  description_ar: string;
  price: number;
  image: string;
  quantity: number;
}

@Injectable({ providedIn: 'root' })
export class CartStateService {
  // ðŸŸ¢ Ø¹Ø¯Ø¯ Ø§Ù„Ù…Ù†ØªØ¬Ø§Øª
  private cartCountSource = new BehaviorSubject<number>(0);
  cartCount$ = this.cartCountSource.asObservable();

  // ðŸŸ¢ ÙƒÙ„ Ø§Ù„Ù…Ù†ØªØ¬Ø§Øª
  private cartItemsSource = new BehaviorSubject<CartItem[]>([]);
  cartItems$ = this.cartItemsSource.asObservable();

  // âœ… ØªØ­Ø¯ÙŠØ« Ø§Ù„Ø¹Ø¯Ø¯
  updateCount(count: number): void {
    this.cartCountSource.next(count);
  }

  // âœ… ØªØ­Ø¯ÙŠØ« Ø§Ù„Ù…Ù†ØªØ¬Ø§Øª ÙƒÙ„Ù‡Ø§
  updateItems(items: CartItem[]): void {
    this.cartItemsSource.next(items);

    // ÙƒÙ…Ø§Ù† Ù†Ø­Ø¯Ø« Ø§Ù„Ø¹Ø¯Ø¯ Ø£ÙˆØªÙˆÙ…Ø§ØªÙŠÙƒ
    const count = items.reduce((sum, item) => sum + item.quantity, 0);
    this.updateCount(count);
  }

  // âœ… reset cart (Ù…Ø«Ù„Ø§Ù‹ Ø¹Ù†Ø¯ ØªØ³Ø¬ÙŠÙ„ Ø§Ù„Ø®Ø±ÙˆØ¬)
  clearCart(): void {
    this.cartItemsSource.next([]);
    this.cartCountSource.next(0);
  }
}
